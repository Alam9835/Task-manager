[{"C:\\Users\\ASUS\\Desktop\\task-manager\\src\\index.js":"1","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\reportWebVitals.js":"2","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\App.js":"3","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\hooks\\useLocalStorageState.js":"4","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\Chart.js":"5","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\NewGoalForm.jsx":"6","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\GoalList.jsx":"7","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\hooks\\useInputState.js":"8","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\Goal.jsx":"9","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\SelectTagFilters.jsx":"10","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\HashTagSelector.jsx":"11","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\CheckBoxComp.jsx":"12"},{"size":593,"mtime":1656331602046,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1655830620908,"results":"15","hashOfConfig":"14"},{"size":5621,"mtime":1656331857591,"results":"16","hashOfConfig":"14"},{"size":475,"mtime":1655831113368,"results":"17","hashOfConfig":"14"},{"size":1319,"mtime":1656331640509,"results":"18","hashOfConfig":"14"},{"size":3084,"mtime":1656328595108,"results":"19","hashOfConfig":"14"},{"size":6674,"mtime":1656246662028,"results":"20","hashOfConfig":"14"},{"size":311,"mtime":1655831113312,"results":"21","hashOfConfig":"14"},{"size":11282,"mtime":1656331673506,"results":"22","hashOfConfig":"14"},{"size":564,"mtime":1656328694544,"results":"23","hashOfConfig":"14"},{"size":2893,"mtime":1656329004114,"results":"24","hashOfConfig":"14"},{"size":804,"mtime":1656331496914,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"oc47w0",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ASUS\\Desktop\\task-manager\\src\\index.js",[],"C:\\Users\\ASUS\\Desktop\\task-manager\\src\\reportWebVitals.js",[],["54","55"],"C:\\Users\\ASUS\\Desktop\\task-manager\\src\\App.js",["56","57"],"import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport useLocalStorageState from \"./hooks/useLocalStorageState\";\n\nimport GoalList from \"./components/GoalList\";\nimport NewGoalForm from \"./components/NewGoalForm\";\nimport Chart from \"./components/Chart\";\n\nimport { Switch, Route, useHistory } from \"react-router-dom\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\nimport Brightness7Icon from \"@material-ui/icons/Brightness7\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport Link from \"@material-ui/core/Link\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(0),\n    paddingRight: theme.spacing(0),\n    paddingTop: theme.spacing(2),\n  },\n  searchFilterDiv: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  input: {\n    width: \"90%\",\n  },\n  searchBarRoot: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: theme.spacing(1),\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n    width: \"95%\",\n  },\n  searchIconContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  checkBoxContainer: {\n    padding: theme.spacing(2),\n  },\n  navItemsRight: {\n    margin: \"auto\",\n    marginRight: 0,\n  },\n}));\n\nfunction ElevationScroll(props) {\n  const { children, window } = props;\n  \n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0,\n    target: window ? window() : undefined,\n  });\n\n  return React.cloneElement(children, {\n    elevation: trigger ? 4 : 0,\n  });\n}\n\nElevationScroll.propTypes = {\n  children: PropTypes.element.isRequired,\n \n  window: PropTypes.func,\n};\n\nfunction App(props) {\n  const classes = useStyles();\n  const history = useHistory();\n  const [darkState, setDarkState] = useLocalStorageState(\"darkMode\", false);\n  const paletteType = darkState ? \"dark\" : \"light\";\n\n  const arcBlue = \"#FBCB0A\";\n  const arcOrange = \"#F94C66\";\n\n  const theme = createMuiTheme({\n    palette: {\n      common: {\n        blue: `${arcBlue}`,\n        orange: `${arcOrange}`,\n      },\n      primary: {\n        main: `${arcBlue}`,\n      },\n      secondary: {\n        main: `${arcOrange}`,\n      },\n      type: paletteType,\n    },\n    overrides: {\n      MuiTableCell: {\n        head: {\n          fontSize: \"1rem\",\n          fontWeight: 700,\n          color: arcOrange,\n          borderColor: arcOrange,\n        },\n      },\n    },\n  });\n\n  const handleThemeChange = () => {\n    setDarkState(!darkState);\n  };\n\n  const [globalHashTags] = useLocalStorageState(\"hashtags\", [\n    { _id: \"0\", tag: \"food\", color: \"grey\" },\n    { _id: \"1\", tag: \"personal\", color: \"teal\" },\n    { _id: \"2\", tag: \"family\", color: \"lime\" },\n    { _id: \"3\", tag: \"academic\", color: \"blue\" },\n  ]);\n  const [goals, setGoals] = useLocalStorageState(\"goals\", [\n    \n  ]);\n  return (\n    <div>\n      <CssBaseline />\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <ElevationScroll {...props}>\n          <AppBar>\n            <Toolbar>\n              <Typography variant=\"h6\">Task Manager</Typography>\n              <div className={classes.navItemsRight}>\n                <Button\n                  type=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    history.push(\"/statistics\");\n                  }}\n                >\n                 <b>📊</b>  \n                </Button>\n                <IconButton\n                  aria-label=\"toggle dark mode\"\n                  aria-controls=\"menu-appbar\"\n                  aria-haspopup=\"false\"\n                  onClick={handleThemeChange}\n                  color=\"inherit\"\n                >\n                  {darkState ? <Brightness7Icon /> : <Brightness4Icon />}\n                </IconButton>\n                <Link\n                  href=\"https://github.com/Juggernaut9/get-it-done\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  color=\"inherit\"\n                >\n                  \n                </Link>\n              </div>\n            </Toolbar>\n          </AppBar>\n        </ElevationScroll>\n        <Toolbar />\n        <Container>\n          <Box my={2}>\n            <Switch>\n              <Route\n                path=\"/\"\n                exact\n                render={(routeProps) => (\n                  <>\n                    <NewGoalForm\n                      setGoals={setGoals}\n                      globalHashTags={globalHashTags}\n                    />\n                    <GoalList\n                      goals={goals}\n                      setGoals={setGoals}\n                      globalHashTags={globalHashTags}\n                    />\n                  </>\n                )}\n              />\n              <Route\n                path=\"/statistics\"\n                exact\n                render={(routeProps) => <Chart goals={goals} />}\n              />\n            </Switch>\n          </Box>\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\hooks\\useLocalStorageState.js",[],"C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\Chart.js",[],"C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\NewGoalForm.jsx",[],"C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\GoalList.jsx",["58"],"import React, { useState, useEffect } from \"react\";\nimport Goal from \"./Goal\";\nimport useInputState from \"../hooks/useInputState\";\n\nimport SortIcon from \"@material-ui/icons/Sort\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nimport SelectTagFilters from \"./SelectTagFilters\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(0),\n    paddingRight: theme.spacing(0),\n    paddingTop: theme.spacing(2),\n  },\n  searchFilterDiv: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  input: {\n    width: \"90%\",\n  },\n  searchBarRoot: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: theme.spacing(1),\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n    width: \"95%\",\n  },\n  searchIconContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  checkBoxContainer: {\n    padding: theme.spacing(2),\n  },\n}));\n\nfunction GoalList({ goals, setGoals, globalHashTags }) {\n  const classes = useStyles();\n  const [searchText, setSearchText, resetSearchText] = useInputState(\"\");\n  const [selectedHastagIds, setSelectedHashTagIds] = useState({});\n  const [filteredGoals, setFilteredGoals] = useState(goals);\n  const [sortedGoals, setSortedGoals] = useState(filteredGoals);\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  useEffect(() => {\n    setSortedGoals(filteredGoals);\n  }, [filteredGoals]);\n\n  useEffect(() => {\n    const textFilter = !searchText\n      ? goals\n      : goals.filter((goal) => {\n          if (\n            goal.name\n              .trim()\n              .toLowerCase()\n              .includes(searchText.trim().toLowerCase()) ||\n            goal.description\n              .trim()\n              .toLowerCase()\n              .includes(searchText.trim().toLowerCase())\n          ) {\n            return true;\n          }\n          return false;\n        });\n\n    const tagFilter =\n      Object.keys(selectedHastagIds).length === 0\n        ? textFilter\n        : textFilter.filter((goal) => {\n            for (let key in goal.hashTags) {\n              if (selectedHastagIds[key]) {\n                return true;\n              }\n            }\n            return false;\n          });\n\n    setFilteredGoals(tagFilter);\n  }, [searchText, goals, selectedHastagIds]);\n\n  const renderGoals = () => {\n    return sortedGoals.map((goal) => (\n      <Goal\n        goal={goal}\n        setGoals={setGoals}\n        globalHashTags={globalHashTags}\n        key={goal._id}\n      />\n    ));\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.searchFilterDiv}>\n        <Paper elevation={2} component=\"div\" className={classes.searchBarRoot}>\n          <InputBase\n            className={classes.input}\n            placeholder=\"Search Task\"\n            inputProps={{ \"aria-label\": \"search Goals\" }}\n            value={searchText}\n            onChange={setSearchText}\n          />\n          <div className={classes.searchIconContainer}>\n            <SearchIcon />\n          </div>\n        </Paper>\n        <IconButton\n          aria-label=\"more\"\n          aria-controls=\"long-menu\"\n          aria-haspopup=\"true\"\n          onClick={handleClick}\n        >\n          <SortIcon />\n        </IconButton>\n      </div>\n      <div className={classes.checkBoxContainer}>\n        <Typography style={{ fontSize: \"1.5rem\" }}>\n          <u>Select Hashtag: </u>\n        </Typography>\n        <SelectTagFilters\n          selectedHastagIds={selectedHastagIds}\n          setSelectedHashTagIds={setSelectedHashTagIds}\n          globalHashTags={globalHashTags}\n        />\n      </div>\n\n      <Menu\n        id=\"long-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleClose}\n      >\n        <MenuList>\n          <MenuItem\n            onClick={() => {\n              setSortedGoals((prevGoals) => {\n                return prevGoals.sort(function (a, b) {\n                  const duration1 = a.isActive\n                    ? a.duration +\n                      (new Date().getTime() -\n                        new Date(a.latestStartTimeStamp).getTime()) /\n                        1000\n                    : a.duration;\n\n                  const duration2 = b.isActive\n                    ? b.duration +\n                      (new Date().getTime() -\n                        new Date(b.latestStartTimeStamp).getTime()) /\n                        1000\n                    : b.duration;\n                  return duration1 - duration2;\n                });\n              });\n              handleClose();\n            }}\n          >\n            <ListItemIcon>\n              <ArrowDownwardIcon fontSize=\"small\" />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">Time spent</Typography>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              setSortedGoals((prevGoals) => {\n                return prevGoals.sort(function (a, b) {\n                  const duration1 = a.isActive\n                    ? a.duration +\n                      (new Date().getTime() -\n                        new Date(a.latestStartTimeStamp).getTime()) /\n                        1000\n                    : a.duration;\n\n                  const duration2 = b.isActive\n                    ? b.duration +\n                      (new Date().getTime() -\n                        new Date(b.latestStartTimeStamp).getTime()) /\n                        1000\n                    : b.duration;\n                  return duration2 - duration1;\n                });\n              });\n              handleClose();\n            }}\n          >\n            <ListItemIcon>\n              <ArrowUpwardIcon fontSize=\"small\" />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">Time spent</Typography>\n          </MenuItem>\n        </MenuList>\n      </Menu>\n      {renderGoals()}\n    </div>\n  );\n}\n\nexport default GoalList;\n\n//TODO add reset filters button?\n","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\hooks\\useInputState.js",[],"C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\Goal.jsx",["59","60"],"import React, { useEffect, useState } from \"react\";\nimport humanizeDuration from \"humanize-duration\";\n\nimport useInputState from \"../hooks/useInputState\";\nimport HashTagSelector from \"./HashTagSelector\";\n\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport {\n  red,\n  pink,\n  green,\n  purple,\n  blue,\n  teal,\n  lime,\n  yellow,\n  grey,\n  deepOrange,\n} from \"@material-ui/core/colors\";\n\nconst colors = {\n  red,\n  pink,\n  green,\n  purple,\n  blue,\n  teal,\n  lime,\n  yellow,\n  grey,\n  deepOrange,\n};\n\nfunction EditGoal({ goal, setGoals, globalHashTags, setEditing }) {\n  const useStyles = makeStyles((theme) => ({\n    paper: {\n      marginBottom: theme.spacing(3),\n    },\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: \"25ch\",\n    },\n    fab: {\n      marginRight: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    fabContainer: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n    },\n    buttons: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      paddingBottom: theme.spacing(2),\n    },\n    btn: {\n      marginRight: theme.spacing(2),\n    },\n  }));\n  const classes = useStyles();\n  const [name, setName, resetName] = useInputState(goal.name);\n  const [desc, setDesc, resetDesc] = useInputState(goal.description);\n  const [hashTags, setHashTags] = useState(goal.hashTags);\n\n  const handleUpdateGoal = (e) => {\n    e.preventDefault();\n    setGoals((prevGoals) => {\n      return prevGoals.map((prevGoal) => {\n        if (goal._id !== prevGoal._id) {\n          return prevGoal;\n        }\n        return { ...prevGoal, name, description: desc, hashTags };\n      });\n    });\n    setEditing(false);\n  };\n\n  const handleCancel = () => {\n    setEditing(false);\n  };\n\n  return (\n    <Paper elevation={2} className={classes.paper}>\n      <form onSubmit={handleUpdateGoal}>\n        <div className={classes.root}>\n          <Typography\n            variant=\"h1\"\n            component=\"h1\"\n            gutterBottom\n            align=\"center\"\n            style={{ fontSize: \"3rem\", marginTop: \"1.5rem\" ,color: \"red\"}}\n          >\n            Edit Your Task 📝\n          </Typography>\n          \n          <TextField\n            id=\"asdf9wje9r\"\n            label=\"Task Name\"\n            style={{ margin: 8 }}\n            fullWidth\n            margin=\"dense\"\n            value={name}\n            required\n            onChange={setName}\n          />\n        \n\n          <TextField\n            id=\"standard-fuadasdll-width-2\"\n            label=\"Task Description\"\n            style={{ margin: 8 }}\n            fullWidth\n            margin=\"dense\"\n            value={desc}\n            onChange={setDesc}\n          />\n          <HashTagSelector\n            hashTags={hashTags}\n            setHashTags={setHashTags}\n            globalHashTags={globalHashTags}\n          />\n        </div>\n        <div className={classes.buttons}>\n          <Button\n            className={classes.btn}\n            color=\"secondary\"\n            type=\"button\"\n            onClick={handleCancel}\n            variant=\"contained\"\n            size=\"large\"\n          >\n            Save\n          </Button>\n          <Button\n            className={classes.btn}\n            variant=\"contained\"\n            type=\"submit\"\n            size=\"large\"\n            color=\"red\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </Paper>\n  );\n}\n\nfunction Goal({ goal, setGoals, globalHashTags }) {\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      padding: theme.spacing(2),\n      marginBottom: theme.spacing(3),\n    },\n    TitleAndOptionsContainer: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n    },\n    hashTag: {\n      margin: theme.spacing(1),\n    },\n    startButton: {\n      marginLeft: theme.spacing(1),\n      marginTop: theme.spacing(2),\n    },\n    desc: {\n      fontSize: \"1.2rem\",\n      fontWeight: \"100\",\n    },\n  }));\n  const classes = useStyles();\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const [editing, setEditing] = useState(false);\n  const [displaySeconds, setDisplaySeconds] = useState(\n    goal.isActive\n      ? goal.duration +\n          (new Date().getTime() -\n            new Date(goal.latestStartTimeStamp).getTime()) /\n            1000\n      : goal.duration\n  );\n\n  //3 dot menu\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n  };\n\n  useEffect(() => {\n    let myInterval = setInterval(() => {\n      if (goal.isActive) {\n        setDisplaySeconds((prevDisplaySeconds) => prevDisplaySeconds + 1);\n      }\n    }, 1000);\n    return () => {\n      clearInterval(myInterval);\n    };\n  });\n\n  const handleStartPause = () => {\n    setGoals((prevGoals) => {\n      return prevGoals.map((prevGoal) => {\n        if (goal._id !== prevGoal._id) {\n          return prevGoal;\n        }\n\n        return {\n          ...prevGoal,\n          latestStartTimeStamp: !prevGoal.isActive ? new Date() : null,\n          ...(prevGoal.isActive && {\n            duration:\n              prevGoal.duration +\n              (new Date().getTime() -\n                new Date(prevGoal.latestStartTimeStamp).getTime()) /\n                1000,\n          }),\n          isActive: !prevGoal.isActive,\n        };\n      });\n    });\n  };\n\n  const handleClickOpen = () => {\n    setModalOpen(true);\n  };\n\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const renderHashTags = (hashTags) => {\n    const chips = [];\n    for (let key in hashTags) {\n      const ColorButton = withStyles((theme) => ({\n        root: {\n          color: theme.palette.getContrastText(\n            colors[hashTags[key].color][500]\n          ),\n          backgroundColor: colors[hashTags[key].color][500],\n          \"&:hover\": {\n            backgroundColor: colors[hashTags[key].color][700],\n          },\n        },\n      }))(Button);\n\n      chips.push(\n        <ColorButton\n          className={classes.hashTag}\n          size=\"small\"\n          key={hashTags[key]._id}\n        >\n          {hashTags[key].tag}\n        </ColorButton>\n      );\n    }\n    return chips;\n  };\n\n  const handleDeleteGoal = (goalId) => {\n    setGoals((prevGoals) => {\n      return prevGoals.filter((prevGoal) => prevGoal._id !== goalId);\n    });\n    handleClose();\n  };\n\n  if (editing) {\n    return (\n      <EditGoal\n        goal={goal}\n        setGoals={setGoals}\n        globalHashTags={globalHashTags}\n        setEditing={setEditing}\n      />\n    );\n  }\n\n  return (\n    <Paper className={classes.root} elevation={2}>\n      <div className={classes.TitleAndOptionsContainer}>\n        <Typography variant=\"h4\" gutterBottom>\n          {goal.name}\n        </Typography>\n        <IconButton\n          aria-label=\"more\"\n          aria-controls=\"long-menu\"\n          aria-haspopup=\"true\"\n          onClick={handleClick}\n        >\n          <MoreVertIcon />\n        </IconButton>\n        <Menu\n          id=\"long-menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={open}\n          onClose={handleCloseMenu}\n        >\n          <MenuItem\n            onClick={() => {\n              handleCloseMenu();\n              setEditing(true);\n            }}\n          >\n            <ListItemIcon>\n              <EditIcon fontSize=\"small\" />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">Edit Task</Typography>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleClickOpen();\n              handleCloseMenu();\n            }}\n          >\n            <ListItemIcon>\n              <DeleteIcon fontSize=\"small\" />\n            </ListItemIcon>\n            <Typography variant=\"inherit\">Delete Task</Typography>\n          </MenuItem>\n        </Menu>\n      </div>\n      <Typography\n        variant=\"body1\"\n        className={classes.desc}\n        gutterBottom\n        style={{ fontSize: \"1.4rem\" }}\n      >\n        {goal.description}\n      </Typography>\n      {/* <p>{new Date(goal.timeAdded).toString()}</p> */}\n      <Typography variant=\"overline\" component=\"p\" gutterBottom>\n        {\" \"}\n        <b>You have spent{\" \"}\n        {humanizeDuration(displaySeconds * 1000, { round: true })} on this task</b>\n      </Typography>\n      {goal?.hashTags &&\n        goal?.hashTags?.length !== 0 &&\n        renderHashTags(goal.hashTags)}\n\n      \n      <div className={classes.startButton}>\n        {goal.isActive ? (\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            className={classes.button}\n            startIcon={<PauseIcon />}\n            onClick={handleStartPause}\n          >\n            pause\n          </Button>\n         \n        ) : \n        \n        \n        \n        (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            startIcon={<PlayArrowIcon />}\n            onClick={handleStartPause}\n          >\n            start\n          </Button>\n\n          \n        )}\n      </div>\n     \n      <Dialog\n        fullScreen={fullScreen}\n        open={modalOpen}\n        onClose={handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {`Delete ${goal.name}?`}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>{goal.description}</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"default\">\n            No\n          </Button>\n          <Button\n            onClick={() => {\n              handleDeleteGoal(goal._id);\n            }}\n            color=\"secondary\"\n            autoFocus\n          >\n            Yes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Paper>\n  );\n}\n\nexport default Goal;\n","C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\SelectTagFilters.jsx",[],"C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\HashTagSelector.jsx",[],"C:\\Users\\ASUS\\Desktop\\task-manager\\src\\components\\CheckBoxComp.jsx",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":2,"column":16,"nodeType":"67","messageId":"68","endLine":2,"endColumn":22},{"ruleId":"65","severity":1,"message":"69","line":15,"column":8,"nodeType":"67","messageId":"68","endLine":15,"endColumn":18},{"ruleId":"65","severity":1,"message":"70","line":53,"column":37,"nodeType":"67","messageId":"68","endLine":53,"endColumn":52},{"ruleId":"65","severity":1,"message":"71","line":90,"column":25,"nodeType":"67","messageId":"68","endLine":90,"endColumn":34},{"ruleId":"65","severity":1,"message":"72","line":91,"column":25,"nodeType":"67","messageId":"68","endLine":91,"endColumn":34},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'uuidv4' is defined but never used.","Identifier","unusedVar","'GitHubIcon' is defined but never used.","'resetSearchText' is assigned a value but never used.","'resetName' is assigned a value but never used.","'resetDesc' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]